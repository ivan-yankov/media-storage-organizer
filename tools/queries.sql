connect 'jdbc:derby:folklore/data/database';
disconnect;

describe ADMIN.FOLKLORE_TRACK;

-- filter 1: duplicates based on title, performer, accompaniment and duration
SELECT TITLE, PERFORMER_ID, ACCOMPANIMENTPERFORMER_ID, DURATION, COUNT(*)
FROM ADMIN.FOLKLORE_TRACK
GROUP BY TITLE, PERFORMER_ID, ACCOMPANIMENTPERFORMER_ID, DURATION
HAVING COUNT(*) > 1;

-- select duplicates based on filter 1
SELECT a.*
FROM ADMIN.FOLKLORE_TRACK a
JOIN (
  SELECT TITLE, PERFORMER_ID, ACCOMPANIMENTPERFORMER_ID, DURATION, COUNT(*)
  FROM ADMIN.FOLKLORE_TRACK
  GROUP BY TITLE, PERFORMER_ID, ACCOMPANIMENTPERFORMER_ID, DURATION
  HAVING COUNT(*) > 1
) b
ON a.TITLE = b.TITLE
AND a.PERFORMER_ID = b.PERFORMER_ID
AND a.ACCOMPANIMENTPERFORMER_ID = b.ACCOMPANIMENTPERFORMER_ID
AND a.DURATION = b.DURATION
ORDER BY a.TITLE;

SELECT COUNT(*) FROM ADMIN.RECORD WHERE ID NOT IN (SELECT RECORD_ID FROM ADMIN.FOLKLORE_TRACK);

SELECT COUNT(*) FROM ADMIN.FOLKLORE_TRACK;
SELECT COUNT(*) FROM ADMIN.FOLKLORE_TRACK WHERE RECORD IS NULL;

UPDATE ADMIN.FOLKLORE_TRACK SET ADMIN.FOLKLORE_TRACK.RECORD_FORMAT = 'FLAC';

-- set column value, which is taken from another table
-- depends on the data could expand to a large number of subqueries as derby implements only ANSII SQL standard and does not support more advanced option for that
UPDATE ADMIN.FOLKLORE_TRACK SET ADMIN.FOLKLORE_TRACK.RECORD = (SELECT ADMIN.RECORD."DATA" FROM ADMIN.RECORD WHERE ADMIN.FOLKLORE_TRACK.RECORD_ID = ADMIN.RECORD.ID);

CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE('ADMIN', 'FOLKLORE_TRACK', 'folklore-track.txt', '#', '@', 'UTF-8');

CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE_LOBS_TO_EXTFILE('ADMIN', 'FOLKLORE_TRACK', 'folklore-track.txt', '#', '@', 'UTF-8', 'folklore-track.bin');

CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE_LOBS_FROM_EXTFILE('ADMIN', 'FOLKLORE_TRACK', 'folklore-track-new.txt', '#', '@', 'UTF-8', 1);

ALTER TABLE ADMIN.FOLKLORE_TRACK ADD RECORD BLOB;
ALTER TABLE ADMIN.FOLKLORE_TRACK ADD RECORD_FORMAT VARCHAR(255);

ALTER TABLE ADMIN.FOLKLORE_TRACK DROP COLUMN RECORD_ID;

DROP TABLE ADMIN.RECORD;

SELECT ID FROM ADMIN.RECORD WHERE ID IN (SELECT RECORD_ID FROM ADMIN.FOLKLORE_TRACK);
SELECT ID FROM ADMIN.RECORD WHERE ID NOT IN (SELECT RECORD_ID FROM ADMIN.FOLKLORE_TRACK);
